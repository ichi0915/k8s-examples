# ==== "Welcome to the KodeKloud CKAD Lightning Lab - Part 1! ====

# ==== 1
# "You can toggle between the questions but make sure that that you click on END EXAM before the the timer runs out.
# While this test environment is valid for 60 minutes, challenge yourself and try to complete all 5 questions within 30 minutes! To pass, correctly complete at least 4 out of 5 questions.Good Luck!!!

# Create a Persistent Volume called log-volume. It should make use of a storage class name manual. It should use RWX as the access mode and have a size of 1Gi. The volume should use the hostPath /opt/volume/nginx
# Next, create a PVC called log-claim requesting a minimum of 200Mi of storage. This PVC should bind to log-volume.
# Mount this in a pod called logger at the location /var/www/nginx. This pod should use the image nginx:alpine.
# log-volume created with correct parameters?

# pv.yml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: log-volume
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/opt/volume/nginx"

# pvc.yml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: log-claim
spec:
  storageClassName: manual
  volumeName: log-volume
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 200Mi

# pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: logger
spec:
  volumes:
    - name: log
      persistentVolumeClaim:
        claimName: log-claim
  containers:
    - name: logger
      image: nginx:alpine
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/var/www/nginx"
          name: log-volume


# ==== 2
# We have deployed a new pod called secure-pod and a service called secure-service. Incoming or Outgoing connections to this pod are not working.
# Troubleshoot why this is happening.
# Make sure that incoming connection from the pod webapp-color are successful.
# Important: Don't delete any current objects deployed.
# Important: Don't Alter Existing Objects!
# Connectivity working?


# ==== 3
# Create a pod called time-check in the dvl1987 namespace. This pod should run a container called time-check that uses the busybox image.
# Create a config map called time-config with the data TIME_FREQ=10 in the same namespace.
# The time-check container should run the command: while true; do date; sleep $TIME_FREQ;done and write the result to the location /opt/time/time-check.log.
# The path /opt/time on the pod should mount a volume that lasts the lifetime of this pod.

k create ns dvl1987
kubectl create configmap time-config --from-literal=TIME_FREQ=10 --dry-run=client -o yaml > time-check-config-m.yml
k run pod time-check --image=busybox --dry-run=client -o yaml --command -- "while true; do date; sleep $TIME_FREQ;done" > time-check-pod.yml

# time-check-config-m.yml
apiVersion: v1
data:
  TIME_FREQ: "10"
kind: ConfigMap
metadata:
  name: time-config
  namespace: dvl1987

# time-check-pod.yml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: time-check
  name: time-check
  namespace: dvl1987
spec:
  volumes:
  - name: log-volume
    emptyDir: {}
  containers:
  - image: busybox
    name: time-check
    env:
    - name: TIME_FREQ
      valueFrom:
        configMapKeyRef:
          name: time-config
          key: TIME_FREQ
    volumeMounts:
    - mountPath: /opt/time
      name: log-volume
    command:
    - "/bin/sh"
    - "-c"
    - "while true; do date; sleep $TIME_FREQ;done > /opt/time/time-check.log"


# ==== 4
# Create a new deployment called nginx-deploy, with one single container called nginx, image nginx:1.16 and 4 replicas.
# The deployment should use RollingUpdate strategy with maxSurge=1, and maxUnavailable=2.
# Next upgrade the deployment to version 1.17.
# Finally, once all pods are updated, undo the update and go back to the previous version.

# Deployment created correctly?
# Was the deployment created with nginx:1.16?
# Was it upgraded to 1.17?
# Deployment rolled back to 1.16?



# ==== 5
# Create a redis deployment with the following parameters:
# Name of the deployment should be redis using the redis:alpine image. It should have exactly 1 replica.
# The container should request for .2 CPU. It should use the label app=redis.

# It should mount exactly 2 volumes.
# a. An Empty directory volume called data at path /redis-master-data.
# b. A configmap volume called redis-config at path /redis-master.
# c. The container should expose the port 6379.

# The configmap has already been created.
# Deployment created correctly?

